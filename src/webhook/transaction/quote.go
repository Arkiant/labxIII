package transaction

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
)

func (s *ServiceClient) Quote(c QuoteCriteria) (string, error) {

	//ValidateRequest
	if c.Text == "" || c.Access == "" || c.MaxSize == 0 {
		return "", fmt.Errorf("Error params")
	}

	//buildRequest
	requestString := fmt.Sprintf(`{"query":"query ($criteriaQuote: HotelCriteriaQuoteInput!, $settings: HotelSettingsInput) 
	{\n  hotelX {\n    quote(criteria: $criteriaQuote, settings: $settings) {\n                 auditData{\n        transactions{\n         
    request\n          response\n        }\n      } \n      optionQuote {\n        addOns{\n          distribution{\n            
	value\n            key\n          }\n        }\n        optionRefId\n        status\n        price {\n          currency\n         
	binding\n          net\n          gross\n          exchange {\n            currency\n            rate\n          }\n         
	markups {\n            channel\n            currency\n            binding\n            net\n            gross\n          
	exchange {\n              currency\n              rate\n            }\n            rules {\n              id\n             
	name\n              type\n              value\n            }\n          }\n        }\n        cancelPolicy {\n     
	refundable\n          cancelPenalties {\n            hoursBefore\n            penaltyType\n        
	currency\n            value\n          }\n        }\n        cardTypes\n        remarks\n    
	surcharges {\n          chargeType\n          chargeType\n          price {\n          
	currency\n            binding\n            net\n            gross\n          }\n    
	}\n      }\n      errors {\n        code\n        type\n        description\n     
	}\n      warnings {\n        code\n        type\n        description\n      }\n    }\n  }\n}\n",
	"variables":{"criteriaQuote":{"optionRefId":"%s","settings":{"context":"HOTELTEST","client":"labx","auditTransactions":true,"testMode":true,"plugins":[]}}}, request.Text, request.Access, request.MaxSize)`
	,c.optionRefId

	r := bytes.NewReader([]byte(requestString))

	//Do call
	resp, err := s.client.Post(context.TODO(), r)

	defer func() {
		if resp != nil {
			resp.Close()
		}
	}()

	rs := AutoGenerated{}

	if err != nil {
		return "", fmt.Errorf("Error")
	}

	//parseResponse

	re, err := gzip.NewReader(resp)

	if err != nil {
		return "", fmt.Errorf("Error reader")
	}

	bodyResponse, err := ioutil.ReadAll(re)

	if err != nil {
		return "", fmt.Errorf("Error ReadAll")
	}

	println(string(bodyResponse))

	err = json.Unmarshal(bodyResponse, &rs)

	if err != nil {
		return "", fmt.Errorf("Error Unmarshal")
	}

	return rs.Data.HotelX., nil

	//errors control
}
