package transaction

import (
	"github.com/Arkiant/labxIII/src/kit/date"
	"github.com/Arkiant/labxIII/src/webhook/transaction/http"
)

type SearchCriteria struct {
	CheckIn     date.Date `json:"checkIn"`
	CheckOut    date.Date `json:"checkOut"`
	Destination string    `json:"destination"`
	NumPaxes    int       `json:"numPaxes"`
}

type DestinationSearcherCriteria struct {
	Text    string `json:"text"`
	Access  string `json:"access"`
	MaxSize int    `json:"maxSize"`
}

type Price struct {
	Currency string  `json:"currency"`
	Gross    float32 `json:"gross"`
}
type Options struct {
	ID        string `json:"id"`
	HotelName string `json:"hotelName"`
	Price     Price  `json:"price"`
}
type Search struct {
	Errors   []Error   `json:"errors"`
	Warnings []Error   `json:"warnings"`
	Options  []Options `json:"options"`
}

type Error struct {
	Code        string `json:"code"`
	Type        string `json:"type"`
	Description string `json:"description"`
}

type HotelxResponse struct {
	Data Data `json:"data"`
}
type DestinationSearcher struct {
	Code      string `json:"code"`
	Available bool   `json:"available"`
}
type HotelX struct {
	Search              Search                `json:"search"`
	DestinationSearcher []DestinationSearcher `json:"destinationSearcher"`
	Quote               Quote                 `json:"quote"`
	Book                Book                  `json:"book"`
}
type Data struct {
	HotelX HotelX `json:"hotelX"`
}

type AutoGenerated struct {
	Data Data `json:"data"`
}
type OptionQuote struct {
	OptionRefID string `json:"optionRefId"`
	Status      string `json:"status"`
}
type Quote struct {
	OptionQuote OptionQuote `json:"optionQuote"`
	Errors      []Error     `json:"errors"`
	Warnings    []Error     `json:"warnings"`
}

type SearchResponse struct {
	OptionID   string  `json:"optionID"`
	HotelName  string  `json:"hotelName"`
	Amount     float32 `json:"amount"`
	Currency   string  `json:"currency"`
	Refundable bool    `json:"refundable"`
}

type BookCriteria struct {
	OptionRefID     string `json:"optionRefId"`
	ClientReference string `json:"clientReference"`
}

type Paxes struct {
	Name    string `json:"name"`
	Surname string `json:"surname"`
	Age     int    `json:"age"`
}

type Parameters struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}
type PluginsType struct {
	Type       string       `json:"type"`
	Name       string       `json:"name"`
	Parameters []Parameters `json:"parameters"`
}
type Plugins struct {
	Step        string        `json:"step"`
	PluginsType []PluginsType `json:"pluginsType"`
}
type Settings struct {
	Context           string  `json:"context"`
	Client            string  `json:"client"`
	AuditTransactions bool    `json:"auditTransactions"`
	TestMode          bool    `json:"testMode"`
	Plugins           Plugins `json:"plugins"`
}

type Reference struct {
	Client string `json:"client"`
}
type Booking struct {
	Status    string    `json:"status"`
	Reference Reference `json:"reference"`
}
type Book struct {
	Booking  Booking `json:"booking"`
	Errors   []Error `json:"errors"`
	Warnings []Error `json:"warnings"`
}

type Service interface {
	Search(SearchCriteria) (SearchResponse, error)
	DestinationSearcher(DestinationSearcherCriteria) (string, error)
	Quote(QuoteRequest) (string, error)
	Book(BookCriteria) (Booking, error)
}

type QuoteRequest struct {
	OptionRefId string `json:"optionRefId"`
}

type QuoteResponse struct {
	optionRefId string `json:"optionRefId"`
	status      string `json:"status"`
	errors      error  `json:"errors"`
}

var _ Service = (*ServiceClient)(nil)

type ServiceClient struct {
	client http.Service
}

func NewService(c http.Service) Service {
	return &ServiceClient{
		client: c,
	}
}
